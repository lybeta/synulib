/*
 * Copyright (C) 2011 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cn.skyliuyang.synulib;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.ParseException;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.SimpleAdapter;

import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.ActionBar.Tab;
import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.app.SherlockListFragment;

public class MainActivity extends SherlockFragmentActivity implements
		ActionBar.TabListener {
	static final int NUM_ITEMS = 4;
	private ActionBar ab;
	private MyAdapter mAdapter;
	private ViewPager mPager;
	private static Context mContext;
	private static final int MSG_DISMISS_PROGRESS_DIALOG = 17;
	private static final int MSG_UPDATE_ANNOUNCEMENTS_LIST = 18;
	private static final int MSG_UPDATE_HOTSEARCH_LIST = 19;
	private static final int MSG_UPDATE_HOTBOOKS_LIST = 20;
	private static final int MSG_UPDATE_CATEGORIES_LIST = 21;

	
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.fragment_pager);
		mAdapter = new MyAdapter(getSupportFragmentManager());
		mPager = (ViewPager) findViewById(R.id.pager);
		mPager.setAdapter(mAdapter);
		mPager.setOnPageChangeListener(new OnPageChangeListener() {

			
			public void onPageSelected(int arg0) {
				Log.d("k", "onPageSelected - " + arg0);
				// activity从1到2滑动，2被加载后掉用此方法
				ab.setSelectedNavigationItem(arg0);
			}

			
			public void onPageScrolled(int arg0, float arg1, int arg2) {
				Log.d("k", "onPageScrolled - " + arg0);
				// 从1到2滑动，在1滑动前调用
			}

			
			public void onPageScrollStateChanged(int arg0) {
				Log.d("k", "onPageScrollStateChanged - " + arg0);
				// 状态有三个0空闲，1是增在滑行中，2目标加载完毕
				/**
				 * Indicates that the pager is in an idle, settled state. The
				 * current page is fully in view and no animation is in
				 * progress.
				 */
				// public static final int SCROLL_STATE_IDLE = 0;
				/**
				 * Indicates that the pager is currently being dragged by the
				 * user.
				 */
				// public static final int SCROLL_STATE_DRAGGING = 1;
				/**
				 * Indicates that the pager is in the process of settling to a
				 * final position.
				 */
				// public static final int SCROLL_STATE_SETTLING = 2;

			}
		});
		mContext = this;

		ab = getSupportActionBar();
		ab.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
		for (int i = 1; i <= 4; i++) {
			ActionBar.Tab tab = ab.newTab();
			if (1 == i) {
				tab.setText("主页");
			} else if (2 == i) {
				tab.setText("书目检索");
			} else if (3 == i) {
				tab.setText("热门图书");
			} else if (4 == i) {
				tab.setText("新书通报");
			}
			tab.setTabListener(this);
			ab.addTab(tab);
		}

	}

	public static class MyAdapter extends FragmentPagerAdapter {
		public MyAdapter(FragmentManager fm) {
			super(fm);
		}

		
		public int getCount() {
			return NUM_ITEMS;
		}

		
		public Fragment getItem(int position) {
			return ArrayListFragment.newInstance(position);
		}
	}

	public static class ArrayListFragment extends SherlockListFragment {
		int mNum;
		private SimpleAdapter itemsAdapter;
		private ProgressDialog dialog;
		private List<Map<String, String>> mAnnouncementsList= null;
		private List<Map<String, String>> mHotSearchList= null;
		private List<Map<String, String>> mHotBooksList = null;
		private List<Map<String, String>> mCategoriesList = null;
		private ObtainAnnouncementsThread mObtainAnnouncementsThread = null;
		private ObtainHotSearchThread mObtainHotSearchThread = null;
		private ObtainHotBooksThread mObtainHotBooksThread = null;
		private ObtainCategoriesThread mObtainCategoriesThread = null;
		private boolean flag = true;

		/**
		 * Create a new instance of CountingFragment, providing "num" as an
		 * argument.
		 */
		static ArrayListFragment newInstance(int num) {
			ArrayListFragment f = new ArrayListFragment();

			// Supply num input as an argument.
			Bundle args = new Bundle();
			args.putInt("num", num);
			f.setArguments(args);

			return f;
		}

		/**
		 * When creating, retrieve this instance's number from its arguments.
		 */
		
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			mNum = getArguments() != null ? getArguments().getInt("num") : 1;
		}

		/**
		 * The Fragment's UI is just a simple text view showing its instance
		 * number.
		 */
		
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View v = null;
			if (0 == mNum) {
				v = inflater.inflate(R.layout.view1_index, container, false);
			} else if (1 == mNum) {
				v = inflater.inflate(R.layout.view2_search, container, false);
			} else if (2 == mNum) {
				v = inflater.inflate(R.layout.view3_hot, container, false);
			} else if (3 == mNum) {
				v = inflater.inflate(R.layout.view4_classified, container,false);
			} 
			return v;
		}

		
		public void onActivityCreated(Bundle savedInstanceState) {
			super.onActivityCreated(savedInstanceState);

			// 设置正在处理窗口
			dialog = new ProgressDialog(mContext);
			dialog.setMessage("~~o(>_<)o ~~努力加载中...");
			dialog.setCancelable(false);
			if (0 == mNum) {
				dialog.show();
				// 开始动态加载公告线程
				if (mObtainAnnouncementsThread == null) {
					mObtainAnnouncementsThread = new ObtainAnnouncementsThread();
					flag = true;
					mObtainAnnouncementsThread.start();
					mObtainAnnouncementsThread.interrupt();
					mObtainAnnouncementsThread = null;
				}
			} else if (1 == mNum) {
				dialog.show();
				// 开始动态加载热门搜索线程
				if (mObtainHotSearchThread == null) {
					mObtainHotSearchThread = new ObtainHotSearchThread();
					flag = true;
					mObtainHotSearchThread.start();
					mObtainHotSearchThread.interrupt();
					mObtainHotSearchThread = null;
				}
			} else if (2 == mNum) {
				// 开始动态加载热门借阅线程
				if (mObtainHotBooksThread == null) {
					mObtainHotBooksThread = new ObtainHotBooksThread();
					flag = true;
					mObtainHotBooksThread.start();
					mObtainHotBooksThread.interrupt();
					mObtainHotBooksThread = null;
				}
			} else if (3 == mNum) {
				// 开始动态加载分类目录线程
				if (mObtainCategoriesThread == null) {
					mObtainCategoriesThread = new ObtainCategoriesThread();
					flag = true;
					mObtainCategoriesThread.start();
					mObtainCategoriesThread.interrupt();
					mObtainCategoriesThread = null;
				}
			} 
			
		}

		Handler mHandler = new Handler() {
			
			public void handleMessage(Message msg) {
				// TODO Auto-generated method stub
				switch (msg.what) {
				case MSG_UPDATE_ANNOUNCEMENTS_LIST:
					itemsAdapter = new SimpleAdapter(getActivity(),
							mAnnouncementsList, R.layout.list_item_announcement, 
							new String[] { "name","url"},
							new int[] { R.id.tv_list_item_announcement_name,R.id.tv_list_item_announcement_url });
					setListAdapter(itemsAdapter);
					break;
				case MSG_UPDATE_HOTSEARCH_LIST:
					itemsAdapter = new SimpleAdapter(getActivity(),
							mHotSearchList, R.layout.list_item_hotsearch, 
							new String[] { "name","url"},
							new int[] { R.id.tv_list_item_hotsearch_name,R.id.tv_list_item_hotsearch_url });
					setListAdapter(itemsAdapter);
					break;
				case MSG_UPDATE_HOTBOOKS_LIST:
					itemsAdapter = new SimpleAdapter(getActivity(),
							mHotBooksList, R.layout.list_item_h_n_r, 
							new String[] { "name"},
							new int[] { R.id.tv_list_item_h_n_r_name});
					setListAdapter(itemsAdapter);
					break;
				case MSG_UPDATE_CATEGORIES_LIST:
					itemsAdapter = new SimpleAdapter(getActivity(),
							mCategoriesList, R.layout.list_item_h_n_r, 
							new String[] { "name"},
							new int[] { R.id.tv_list_item_h_n_r_name});
					setListAdapter(itemsAdapter);
					break;
				
				case MSG_DISMISS_PROGRESS_DIALOG:
					// 关闭正在处理窗口
					dialog.dismiss();
					break;
				default:
					break;
				}
				super.handleMessage(msg);
			}
		};

		class ObtainAnnouncementsThread extends Thread {

			
			public void run() {
				while (flag) {

					// 逐项添加程序，并发送消息更新ListView列表。
					try {
						mAnnouncementsList = new AnnouncementLoader().load();
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}// 下载数据（耗时的操作）

					mHandler.sendEmptyMessage(MSG_UPDATE_ANNOUNCEMENTS_LIST);
					mHandler.sendEmptyMessage(MSG_DISMISS_PROGRESS_DIALOG);

					flag = false;
				}
			}
		}
	
		class ObtainHotSearchThread extends Thread{
			
			public void run() {
				while (flag) {

					// 逐项添加程序，并发送消息更新ListView列表。
					try {
						mHotSearchList = new HotSearchLoader().load();
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}// 下载数据（耗时的操作）

					mHandler.sendEmptyMessage(MSG_UPDATE_HOTSEARCH_LIST);
					mHandler.sendEmptyMessage(MSG_DISMISS_PROGRESS_DIALOG);

					flag = false;
				}
			}
		}
		
		class ObtainHotBooksThread extends Thread{
			
			public void run() {
				while (flag) {
					mHotBooksList = new StringArrayLoader().loadHotBooks();
					mHandler.sendEmptyMessage(MSG_UPDATE_HOTBOOKS_LIST);

					flag = false;
				}
			}
		}
		
		class ObtainCategoriesThread extends Thread{
			
			public void run() {
				while (flag) {
					mCategoriesList = new StringArrayLoader().loadCategories();
					mHandler.sendEmptyMessage(MSG_UPDATE_CATEGORIES_LIST);

					flag = false;
				}
			}
		}
		

		@Override
		public void onListItemClick(ListView l, View v, int position, long id) {
			// TODO Auto-generated method stub
			super.onListItemClick(l, v, position, id);
			if(0 == mNum){
				
			}else if(1 == mNum){
				@SuppressWarnings("unchecked")
				HashMap<String, String> map = (HashMap<String, String>) l.getItemAtPosition(position);
				Intent intent=new Intent(); 
	            intent.putExtra("url", "http://58.154.49.3:8080/opac/"+map.get("url")); 
	            intent.setClass(mContext,HotSearchActivity.class); 
	            startActivity(intent);
			}else if(2 == mNum){
	            Intent intent=new Intent(); 
	            intent.putExtra("hotbooksnum", String.valueOf(position)); 
	            intent.setClass(mContext,HotBooksActivity.class); 
	            startActivity(intent); 
			}else if(3 == mNum){
	            Intent intent=new Intent(); 
	            intent.putExtra("urlnum", String.valueOf(position)); 
	            intent.setClass(mContext,NewBooksActivity.class); 
	            startActivity(intent); 
			}
			
		}
	
	}

	
	public void onTabSelected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub
		mPager.setCurrentItem(tab.getPosition());
	}

	
	public void onTabUnselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub

	}

	
	public void onTabReselected(Tab tab, FragmentTransaction ft) {
		// TODO Auto-generated method stub

	}
}
